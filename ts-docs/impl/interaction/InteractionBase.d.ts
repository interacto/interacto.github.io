import type { FSM } from "../../api/fsm/FSM";
import type { OutputState } from "../../api/fsm/OutputState";
import type { InteractionData } from "../../api/interaction/InteractionData";
import type { Interaction } from "../../api/interaction/Interaction";
import type { EventType } from "../../api/fsm/EventType";
import type { Flushable } from "./Flushable";
import type { Logger } from "../../api/logging/Logger";
interface CancellablePromise extends Promise<void> {
    cancel: () => void;
}
export declare abstract class InteractionBase<D extends InteractionData, DImpl extends D & Flushable, F extends FSM> implements Interaction<D> {
    protected readonly _fsm: F;
    protected asLog: boolean;
    protected readonly registeredNodes: Set<EventTarget>;
    protected readonly mutationObservers: Array<MutationObserver>;
    protected readonly _data: DImpl;
    protected readonly logger?: Logger;
    private mouseHandler?;
    private touchHandler?;
    private keyHandler?;
    private uiHandler?;
    private actionHandler?;
    private readonly disposable;
    private stopImmediatePropag;
    private preventDef;
    protected activated: boolean;
    protected throttleTimeout: number;
    protected currentThrottling?: CancellablePromise;
    protected latestThrottledEvent?: Event;
    protected constructor(fsm: F, data: DImpl, logger?: Logger);
    reinitData(): void;
    get data(): D;
    setThrottleTimeout(timeout: number): void;
    private createThrottleTimeout;
    private checkThrottlingEvent;
    protected updateEventsRegistered(newState: OutputState, oldState: OutputState): void;
    protected getCurrentAcceptedEvents(state: OutputState): ReadonlyArray<EventType>;
    private callBackMutationObserver;
    protected getEventTypesOf(state: OutputState): ReadonlyArray<EventType>;
    registerToNodes(widgets: ReadonlyArray<EventTarget>): void;
    protected unregisterFromNodes(widgets: ReadonlyArray<EventTarget>): void;
    onNodeUnregistered(node: EventTarget): void;
    onNewNodeRegistered(node: EventTarget): void;
    registerToNodeChildren(elementToObserve: Node): void;
    protected registerEventToNode(eventType: EventType, node: EventTarget): void;
    protected unregisterEventToNode(eventType: EventType, node: EventTarget): void;
    protected registerActionHandlerClick(node: EventTarget): void;
    protected unregisterActionHandlerClick(node: EventTarget): void;
    protected registerActionHandlerInput(node: EventTarget): void;
    protected unregisterActionHandlerInput(node: EventTarget): void;
    protected getActionHandler(): EventListener;
    protected getMouseHandler(): (e: MouseEvent) => void;
    protected getTouchHandler(): (e: TouchEvent) => void;
    protected getKeyHandler(): (e: KeyboardEvent) => void;
    protected getUIHandler(): (e: UIEvent) => void;
    isRunning(): boolean;
    fullReinit(): void;
    set stopImmediatePropagation(stop: boolean);
    get stopImmediatePropagation(): boolean;
    set preventDefault(prevent: boolean);
    get preventDefault(): boolean;
    processEvent(event: Event): void;
    private directEventProcess;
    log(log: boolean): void;
    isActivated(): boolean;
    setActivated(activated: boolean): void;
    get fsm(): F;
    reinit(): void;
    uninstall(): void;
}
export {};
