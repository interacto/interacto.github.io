import type { State } from "../../api/fsm/State";
import { InitState } from "./InitState";
import type { OutputState } from "../../api/fsm/OutputState";
import type { FSMHandler } from "../../api/fsm/FSMHandler";
import { TimeoutTransition } from "./TimeoutTransition";
import type { InputState } from "../../api/fsm/InputState";
import type { FSMDataHandler } from "./FSMDataHandler";
import type { Observable } from "rxjs";
import { Subject } from "rxjs";
import type { FSM } from "../../api/fsm/FSM";
import type { Logger } from "../../api/logging/Logger";
export declare class FSMImpl implements FSM {
    protected dataHandler?: FSMDataHandler;
    protected readonly logger?: Logger;
    _log: boolean;
    inner: boolean;
    startingState: State;
    protected _started: boolean;
    readonly initState: InitState;
    protected _currentState: OutputState;
    protected readonly currentStatePublisher: Subject<[OutputState, OutputState]>;
    protected readonly _states: Array<State>;
    protected readonly handlers: Array<FSMHandler>;
    protected readonly eventsToProcess: Array<Event>;
    protected currentTimeout?: TimeoutTransition;
    currentSubFSM: FSM | undefined;
    constructor(logger?: Logger);
    protected buildFSM(dataHandler?: FSMDataHandler): void;
    get currentState(): OutputState;
    set currentState(state: OutputState);
    get currentStateObservable(): Observable<[OutputState, OutputState]>;
    process(event: Event): boolean;
    private processEvent;
    get log(): boolean;
    set log(log: boolean);
    getDataHandler(): FSMDataHandler | undefined;
    private removeKeyEvent;
    enterStdState(state: InputState & OutputState): void;
    get started(): boolean;
    protected processRemainingEvents(): void;
    addRemaningEventsToProcess(event: Event): void;
    onTerminating(): void;
    onCancelling(): void;
    onStarting(): void;
    onUpdating(): void;
    addState(state: InputState): void;
    reinit(): void;
    fullReinit(): void;
    onTimeout(): void;
    stopCurrentTimeout(): void;
    protected checkTimeoutTransition(): void;
    addHandler(handler: FSMHandler): void;
    removeHandler(handler: FSMHandler): void;
    protected notifyHandlerOnStart(): void;
    protected notifyHandlerOnUpdate(): void;
    notifyHandlerOnStop(): void;
    protected notifyHandlerOnCancel(): void;
    get states(): ReadonlyArray<State>;
    getEventsToProcess(): ReadonlyArray<Event>;
    getInitState(): OutputState;
    uninstall(): void;
}
