import type { LogLevel } from "../../api/logging/LogLevel";
import type { InteractionData } from "../../api/interaction/InteractionData";
import type { Command } from "../../api/command/Command";
import type { CmdBinder } from "../../api/binder/CmdBinder";
import type { InteractionBinder } from "../../api/binder/InteractionBinder";
import type { InteractionCmdBinder } from "../../api/binder/InteractionCmdBinder";
import type { Binding } from "../../api/binding/Binding";
import type { BindingsObserver } from "../../api/binding/BindingsObserver";
import type { Interaction } from "../../api/interaction/Interaction";
import type { Widget } from "../../api/binder/BaseBinderBuilder";
import type { UndoHistory } from "../../api/undo/UndoHistory";
import type { Logger } from "../../api/logging/Logger";
export declare abstract class Binder<C extends Command, I extends Interaction<D>, D extends InteractionData> implements CmdBinder<C>, InteractionBinder<I, D>, InteractionCmdBinder<C, I, D> {
    protected firstFn?: (c: C, i: D) => void;
    protected whenFn?: (i: D) => boolean;
    protected produceFn?: (i: D) => C;
    protected widgets: ReadonlyArray<EventTarget>;
    protected dynamicNodes: ReadonlyArray<Node>;
    protected usingFn?: () => I;
    protected hadEffectsFn?: (c: C, i: D) => void;
    protected hadNoEffectFn?: (c: C, i: D) => void;
    protected cannotExecFn?: (c: C, i: D) => void;
    protected endFn?: (c: C, i: D) => void;
    protected onErrFn?: (ex: unknown) => void;
    protected logLevels: ReadonlyArray<LogLevel>;
    protected stopPropagation: boolean;
    protected prevDefault: boolean;
    protected bindingName?: string;
    protected observer?: BindingsObserver;
    protected undoHistory: UndoHistory;
    protected logger: Logger;
    protected constructor(undoHistory: UndoHistory, logger: Logger, observer?: BindingsObserver, binder?: Partial<Binder<C, I, D>>);
    protected abstract duplicate(): Binder<C, I, D>;
    on(widget: ReadonlyArray<Widget<EventTarget>> | Widget<EventTarget>, ...widgets: ReadonlyArray<Widget<EventTarget>>): Binder<C, I, D>;
    onDynamic(node: Widget<Node>): Binder<C, I, D>;
    first(fn: (c: C, i: D) => void): Binder<C, I, D>;
    when(fn: (i: D) => boolean): Binder<C, I, D>;
    ifHadEffects(fn: (c: C, i: D) => void): Binder<C, I, D>;
    ifHadNoEffect(fn: (c: C, i: D) => void): Binder<C, I, D>;
    ifCannotExecute(fn: (c: C, i: D) => void): Binder<C, I, D>;
    end(fn: (c: C, i: D) => void): Binder<C, I, D>;
    log(...level: ReadonlyArray<LogLevel>): Binder<C, I, D>;
    stopImmediatePropagation(): Binder<C, I, D>;
    preventDefault(): Binder<C, I, D>;
    catch(fn: (ex: unknown) => void): Binder<C, I, D>;
    name(name: string): Binder<C, I, D>;
    usingInteraction<I2 extends Interaction<D2>, D2 extends InteractionData>(fn: () => I2): Binder<C, I2, D2>;
    toProduce<C2 extends Command>(fn: (i: D) => C2): Binder<C2, I, D>;
    abstract bind(): Binding<C, I, D>;
}
