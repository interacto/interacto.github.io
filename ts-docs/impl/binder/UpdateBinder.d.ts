import { Binder } from "./Binder";
import type { InteractionData } from "../../api/interaction/InteractionData";
import type { Command } from "../../api/command/Command";
import type { CmdUpdateBinder } from "../../api/binder/CmdUpdateBinder";
import type { InteractionCmdUpdateBinder } from "../../api/binder/InteractionCmdUpdateBinder";
import type { LogLevel } from "../../api/logging/LogLevel";
import type { Binding } from "../../api/binding/Binding";
import type { Interaction } from "../../api/interaction/Interaction";
import type { Widget } from "../../api/binder/BaseBinderBuilder";
import type { BindingsObserver } from "../../api/binding/BindingsObserver";
import type { UndoHistory } from "../../api/undo/UndoHistory";
import type { Logger } from "../../api/logging/Logger";
export declare class UpdateBinder<C extends Command, I extends Interaction<D>, D extends InteractionData> extends Binder<C, I, D> implements CmdUpdateBinder<C>, InteractionCmdUpdateBinder<C, I, D> {
    protected thenFn?: (c: C, i: D) => void;
    protected cancelFn?: (i: D) => void;
    protected endOrCancelFn?: (i: D) => void;
    protected continuousCmdExecution: boolean;
    protected _strictStart: boolean;
    protected throttleTimeout: number;
    constructor(undoHistory: UndoHistory, logger: Logger, observer?: BindingsObserver, binder?: Partial<UpdateBinder<C, I, D>>);
    then(fn: (c: C, i: D) => void): UpdateBinder<C, I, D>;
    continuousExecution(): UpdateBinder<C, I, D>;
    cancel(fn: (i: D) => void): UpdateBinder<C, I, D>;
    endOrCancel(fn: (i: D) => void): UpdateBinder<C, I, D>;
    strictStart(): UpdateBinder<C, I, D>;
    throttle(timeout: number): UpdateBinder<C, I, D>;
    on(widget: ReadonlyArray<Widget<EventTarget>> | Widget<EventTarget>, ...widgets: ReadonlyArray<Widget<EventTarget>>): UpdateBinder<C, I, D>;
    onDynamic(node: Widget<Node>): UpdateBinder<C, I, D>;
    first(fn: (c: C, i: D) => void): UpdateBinder<C, I, D>;
    when(fn: (i: D) => boolean): UpdateBinder<C, I, D>;
    ifHadEffects(fn: (c: C, i: D) => void): UpdateBinder<C, I, D>;
    ifHadNoEffect(fn: (c: C, i: D) => void): UpdateBinder<C, I, D>;
    ifCannotExecute(fn: (c: C, i: D) => void): UpdateBinder<C, I, D>;
    end(fn: (c: C, i: D) => void): UpdateBinder<C, I, D>;
    log(...level: ReadonlyArray<LogLevel>): UpdateBinder<C, I, D>;
    stopImmediatePropagation(): UpdateBinder<C, I, D>;
    preventDefault(): UpdateBinder<C, I, D>;
    catch(fn: (ex: unknown) => void): UpdateBinder<C, I, D>;
    name(name: string): UpdateBinder<C, I, D>;
    usingInteraction<I2 extends Interaction<D2>, D2 extends InteractionData>(fn: () => I2): UpdateBinder<C, I2, D2>;
    toProduce<C2 extends Command>(fn: (i: D) => C2): UpdateBinder<C2, I, D>;
    protected duplicate(): UpdateBinder<C, I, D>;
    bind(): Binding<C, I, D>;
}
